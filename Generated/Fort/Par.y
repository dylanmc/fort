-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Fort.Par
  ( happyError
  , myLexer
  , pListBinding
  , pListExp
  , pListFieldDecl
  , pListLIdent
  , pListLayoutElemCaseAlt
  , pListLayoutElemExp
  , pListLayoutElemExpDecl
  , pListLayoutElemFieldDecl
  , pListLayoutElemIfBranch
  , pListLayoutElemStmt
  , pListLayoutElemTField
  , pListLayoutElemTSum
  , pListLayoutElemTailRecDecl
  , pListSize
  , pListTupleElemExp
  , pListTupleElemPat
  , pListTupleElemType
  , pListDecl
  , pModule
  , pTupleElemExp
  , pTupleElemPat
  , pTupleElemType
  , pLayoutElemTField
  , pLayoutElemTSum
  , pLayoutElemExp
  , pLayoutElemStmt
  , pLayoutElemIfBranch
  , pLayoutElemCaseAlt
  , pLayoutElemFieldDecl
  , pLayoutElemTailRecDecl
  , pLayoutElemExpDecl
  , pADouble
  , pADouble0
  , pAString
  , pAString0
  , pAltPat
  , pAltPat0
  , pBinding
  , pBinding0
  , pCaseAlt
  , pCaseAlt0
  , pDecl
  , pDecl0
  , pExp
  , pExp0
  , pExp1
  , pExp2
  , pExp3
  , pExp4
  , pExp5
  , pExp6
  , pExp7
  , pExpDecl
  , pExpDecl0
  , pFieldDecl
  , pFieldDecl0
  , pFixity
  , pFixity0
  , pIfBranch
  , pIfBranch0
  , pInfixInfo
  , pInfixInfo0
  , pInfixOp
  , pInfixOp0
  , pLIdent
  , pLIdent0
  , pPat
  , pPat0
  , pPrefixOp
  , pPrefixOp0
  , pQualLIdent
  , pQualLIdent0
  , pScalar
  , pScalar0
  , pSize
  , pSize0
  , pStmt
  , pStmt0
  , pTField
  , pTField0
  , pTSum
  , pTSum0
  , pTailRecDecl
  , pTailRecDecl0
  , pTailRecDecls
  , pTailRecDecls0
  , pType
  , pType0
  , pType1
  , pType2
  , pType3
  , pUIdent
  , pUIdent0
  , pUInt
  , pUInt0
  ) where

import Prelude

import qualified Fort.Abs
import Fort.Lex
import qualified Data.Text

}

%name pListBinding_internal ListBinding
%name pListExp_internal ListExp
%name pListFieldDecl_internal ListFieldDecl
%name pListLIdent_internal ListLIdent
%name pListLayoutElemCaseAlt_internal ListLayoutElemCaseAlt
%name pListLayoutElemExp_internal ListLayoutElemExp
%name pListLayoutElemExpDecl_internal ListLayoutElemExpDecl
%name pListLayoutElemFieldDecl_internal ListLayoutElemFieldDecl
%name pListLayoutElemIfBranch_internal ListLayoutElemIfBranch
%name pListLayoutElemStmt_internal ListLayoutElemStmt
%name pListLayoutElemTField_internal ListLayoutElemTField
%name pListLayoutElemTSum_internal ListLayoutElemTSum
%name pListLayoutElemTailRecDecl_internal ListLayoutElemTailRecDecl
%name pListSize_internal ListSize
%name pListTupleElemExp_internal ListTupleElemExp
%name pListTupleElemPat_internal ListTupleElemPat
%name pListTupleElemType_internal ListTupleElemType
%name pListDecl_internal ListDecl
%name pModule_internal Module
%name pTupleElemExp_internal TupleElemExp
%name pTupleElemPat_internal TupleElemPat
%name pTupleElemType_internal TupleElemType
%name pLayoutElemTField_internal LayoutElemTField
%name pLayoutElemTSum_internal LayoutElemTSum
%name pLayoutElemExp_internal LayoutElemExp
%name pLayoutElemStmt_internal LayoutElemStmt
%name pLayoutElemIfBranch_internal LayoutElemIfBranch
%name pLayoutElemCaseAlt_internal LayoutElemCaseAlt
%name pLayoutElemFieldDecl_internal LayoutElemFieldDecl
%name pLayoutElemTailRecDecl_internal LayoutElemTailRecDecl
%name pLayoutElemExpDecl_internal LayoutElemExpDecl
%name pADouble_internal ADouble
%name pADouble0_internal ADouble0
%name pAString_internal AString
%name pAString0_internal AString0
%name pAltPat_internal AltPat
%name pAltPat0_internal AltPat0
%name pBinding_internal Binding
%name pBinding0_internal Binding0
%name pCaseAlt_internal CaseAlt
%name pCaseAlt0_internal CaseAlt0
%name pDecl_internal Decl
%name pDecl0_internal Decl0
%name pExp_internal Exp
%name pExp0_internal Exp0
%name pExp1_internal Exp1
%name pExp2_internal Exp2
%name pExp3_internal Exp3
%name pExp4_internal Exp4
%name pExp5_internal Exp5
%name pExp6_internal Exp6
%name pExp7_internal Exp7
%name pExpDecl_internal ExpDecl
%name pExpDecl0_internal ExpDecl0
%name pFieldDecl_internal FieldDecl
%name pFieldDecl0_internal FieldDecl0
%name pFixity_internal Fixity
%name pFixity0_internal Fixity0
%name pIfBranch_internal IfBranch
%name pIfBranch0_internal IfBranch0
%name pInfixInfo_internal InfixInfo
%name pInfixInfo0_internal InfixInfo0
%name pInfixOp_internal InfixOp
%name pInfixOp0_internal InfixOp0
%name pLIdent_internal LIdent
%name pLIdent0_internal LIdent0
%name pPat_internal Pat
%name pPat0_internal Pat0
%name pPrefixOp_internal PrefixOp
%name pPrefixOp0_internal PrefixOp0
%name pQualLIdent_internal QualLIdent
%name pQualLIdent0_internal QualLIdent0
%name pScalar_internal Scalar
%name pScalar0_internal Scalar0
%name pSize_internal Size
%name pSize0_internal Size0
%name pStmt_internal Stmt
%name pStmt0_internal Stmt0
%name pTField_internal TField
%name pTField0_internal TField0
%name pTSum_internal TSum
%name pTSum0_internal TSum0
%name pTailRecDecl_internal TailRecDecl
%name pTailRecDecl0_internal TailRecDecl0
%name pTailRecDecls_internal TailRecDecls
%name pTailRecDecls0_internal TailRecDecls0
%name pType_internal Type
%name pType0_internal Type0
%name pType1_internal Type1
%name pType2_internal Type2
%name pType3_internal Type3
%name pUIdent_internal UIdent
%name pUIdent0_internal UIdent0
%name pUInt_internal UInt
%name pUInt0_internal UInt0
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('           { PT _ (TS _ 1)          }
  '()'          { PT _ (TS _ 2)          }
  ')'           { PT _ (TS _ 3)          }
  ','           { PT _ (TS _ 4)          }
  '->'          { PT _ (TS _ 5)          }
  '.'           { PT _ (TS _ 6)          }
  ':'           { PT _ (TS _ 7)          }
  ';'           { PT _ (TS _ 8)          }
  '='           { PT _ (TS _ 9)          }
  '=>'          { PT _ (TS _ 10)         }
  'Array'       { PT _ (TS _ 11)         }
  'Bool'        { PT _ (TS _ 12)         }
  'C'           { PT _ (TS _ 13)         }
  'F'           { PT _ (TS _ 14)         }
  'False'       { PT _ (TS _ 15)         }
  'I'           { PT _ (TS _ 16)         }
  'Opaque'      { PT _ (TS _ 17)         }
  'Pointer'     { PT _ (TS _ 18)         }
  'Record'      { PT _ (TS _ 19)         }
  'String'      { PT _ (TS _ 20)         }
  'Sum'         { PT _ (TS _ 21)         }
  'True'        { PT _ (TS _ 22)         }
  'U'           { PT _ (TS _ 23)         }
  '['           { PT _ (TS _ 24)         }
  '\\'          { PT _ (TS _ 25)         }
  ']'           { PT _ (TS _ 26)         }
  '`'           { PT _ (TS _ 27)         }
  'array'       { PT _ (TS _ 28)         }
  'case'        { PT _ (TS _ 29)         }
  'do'          { PT _ (TS _ 30)         }
  'export'      { PT _ (TS _ 31)         }
  'extern'      { PT _ (TS _ 32)         }
  'if'          { PT _ (TS _ 33)         }
  'infix'       { PT _ (TS _ 34)         }
  'infixl'      { PT _ (TS _ 35)         }
  'infixr'      { PT _ (TS _ 36)         }
  'of'          { PT _ (TS _ 37)         }
  'operator'    { PT _ (TS _ 38)         }
  'qualifier'   { PT _ (TS _ 39)         }
  'record'      { PT _ (TS _ 40)         }
  'tailrec'     { PT _ (TS _ 41)         }
  'type'        { PT _ (TS _ 42)         }
  'where'       { PT _ (TS _ 43)         }
  'with'        { PT _ (TS _ 44)         }
  '{'           { PT _ (TS _ 45)         }
  '}'           { PT _ (TS _ 46)         }
  '~'           { PT _ (TS _ 47)         }
  L_ADoubleTok  { PT _ (T_ADoubleTok _)  }
  L_AStringTok  { PT _ (T_AStringTok _)  }
  L_BinTok      { PT _ (T_BinTok _)      }
  L_CharTok     { PT _ (T_CharTok _)     }
  L_DecTok      { PT _ (T_DecTok _)      }
  L_HexTok      { PT _ (T_HexTok _)      }
  L_InfixOpTok  { PT _ (T_InfixOpTok _)  }
  L_IntTok      { PT _ (T_IntTok _)      }
  L_LIdentTok   { PT _ (T_LIdentTok _)   }
  L_OctTok      { PT _ (T_OctTok _)      }
  L_PrefixOpTok { PT _ (T_PrefixOpTok _) }
  L_UIdentTok   { PT _ (T_UIdentTok _)   }

%%

ADoubleTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.ADoubleTok) }
ADoubleTok  : L_ADoubleTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.ADoubleTok (tokenText $1)) }

AStringTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.AStringTok) }
AStringTok  : L_AStringTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.AStringTok (tokenText $1)) }

BinTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.BinTok) }
BinTok  : L_BinTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.BinTok (tokenText $1)) }

CharTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.CharTok) }
CharTok  : L_CharTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.CharTok (tokenText $1)) }

DecTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.DecTok) }
DecTok  : L_DecTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.DecTok (tokenText $1)) }

HexTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.HexTok) }
HexTok  : L_HexTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.HexTok (tokenText $1)) }

InfixOpTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.InfixOpTok) }
InfixOpTok  : L_InfixOpTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.InfixOpTok (tokenText $1)) }

IntTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.IntTok) }
IntTok  : L_IntTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.IntTok (tokenText $1)) }

LIdentTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.LIdentTok) }
LIdentTok  : L_LIdentTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.LIdentTok (tokenText $1)) }

OctTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.OctTok) }
OctTok  : L_OctTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.OctTok (tokenText $1)) }

PrefixOpTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.PrefixOpTok) }
PrefixOpTok  : L_PrefixOpTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.PrefixOpTok (tokenText $1)) }

UIdentTok :: { (Fort.Abs.BNFC'Position, Fort.Abs.UIdentTok) }
UIdentTok  : L_UIdentTok { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.UIdentTok (tokenText $1)) }

ListBinding :: { (Fort.Abs.BNFC'Position, [Fort.Abs.Binding]) }
ListBinding
  : Binding { (fst $1, (:[]) (snd $1)) }
  | Binding ListBinding { (fst $1, (:) (snd $1) (snd $2)) }

ListExp :: { (Fort.Abs.BNFC'Position, [Fort.Abs.Exp]) }
ListExp
  : Exp { (fst $1, (:[]) (snd $1)) }
  | Exp ',' ListExp { (fst $1, (:) (snd $1) (snd $3)) }

ListFieldDecl :: { (Fort.Abs.BNFC'Position, [Fort.Abs.FieldDecl]) }
ListFieldDecl
  : FieldDecl { (fst $1, (:[]) (snd $1)) }
  | FieldDecl ',' ListFieldDecl { (fst $1, (:) (snd $1) (snd $3)) }

ListLIdent :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LIdent]) }
ListLIdent
  : LIdent { (fst $1, (:[]) (snd $1)) }
  | LIdent ListLIdent { (fst $1, (:) (snd $1) (snd $2)) }

ListLayoutElemCaseAlt :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemCaseAlt]) }
ListLayoutElemCaseAlt
  : LayoutElemCaseAlt { (fst $1, (:[]) (snd $1)) }
  | LayoutElemCaseAlt ';' ListLayoutElemCaseAlt { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemExp :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemExp]) }
ListLayoutElemExp
  : LayoutElemExp { (fst $1, (:[]) (snd $1)) }
  | LayoutElemExp ';' ListLayoutElemExp { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemExpDecl :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemExpDecl]) }
ListLayoutElemExpDecl
  : LayoutElemExpDecl { (fst $1, (:[]) (snd $1)) }
  | LayoutElemExpDecl ';' ListLayoutElemExpDecl { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemFieldDecl :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemFieldDecl]) }
ListLayoutElemFieldDecl
  : LayoutElemFieldDecl { (fst $1, (:[]) (snd $1)) }
  | LayoutElemFieldDecl ';' ListLayoutElemFieldDecl { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemIfBranch :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemIfBranch]) }
ListLayoutElemIfBranch
  : LayoutElemIfBranch { (fst $1, (:[]) (snd $1)) }
  | LayoutElemIfBranch ';' ListLayoutElemIfBranch { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemStmt :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemStmt]) }
ListLayoutElemStmt
  : LayoutElemStmt { (fst $1, (:[]) (snd $1)) }
  | LayoutElemStmt ';' ListLayoutElemStmt { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemTField :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemTField]) }
ListLayoutElemTField
  : LayoutElemTField { (fst $1, (:[]) (snd $1)) }
  | LayoutElemTField ';' ListLayoutElemTField { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemTSum :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemTSum]) }
ListLayoutElemTSum
  : LayoutElemTSum { (fst $1, (:[]) (snd $1)) }
  | LayoutElemTSum ';' ListLayoutElemTSum { (fst $1, (:) (snd $1) (snd $3)) }

ListLayoutElemTailRecDecl :: { (Fort.Abs.BNFC'Position, [Fort.Abs.LayoutElemTailRecDecl]) }
ListLayoutElemTailRecDecl
  : LayoutElemTailRecDecl { (fst $1, (:[]) (snd $1)) }
  | LayoutElemTailRecDecl ';' ListLayoutElemTailRecDecl { (fst $1, (:) (snd $1) (snd $3)) }

ListSize :: { (Fort.Abs.BNFC'Position, [Fort.Abs.Size]) }
ListSize
  : Size { (fst $1, (:[]) (snd $1)) }
  | Size ',' ListSize { (fst $1, (:) (snd $1) (snd $3)) }

ListTupleElemExp :: { (Fort.Abs.BNFC'Position, [Fort.Abs.TupleElemExp]) }
ListTupleElemExp
  : TupleElemExp { (fst $1, (:[]) (snd $1)) }
  | TupleElemExp ',' ListTupleElemExp { (fst $1, (:) (snd $1) (snd $3)) }

ListTupleElemPat :: { (Fort.Abs.BNFC'Position, [Fort.Abs.TupleElemPat]) }
ListTupleElemPat
  : TupleElemPat { (fst $1, (:[]) (snd $1)) }
  | TupleElemPat ',' ListTupleElemPat { (fst $1, (:) (snd $1) (snd $3)) }

ListTupleElemType :: { (Fort.Abs.BNFC'Position, [Fort.Abs.TupleElemType]) }
ListTupleElemType
  : TupleElemType { (fst $1, (:[]) (snd $1)) }
  | TupleElemType ',' ListTupleElemType { (fst $1, (:) (snd $1) (snd $3)) }

ListDecl :: { (Fort.Abs.BNFC'Position, [Fort.Abs.Decl]) }
ListDecl
  : {- empty -} { (Fort.Abs.BNFC'NoPosition, []) }
  | Decl { (fst $1, (:[]) (snd $1)) }
  | Decl ';' ListDecl { (fst $1, (:) (snd $1) (snd $3)) }

Module :: { (Fort.Abs.BNFC'Position, Fort.Abs.Module) }
Module : ListDecl { (fst $1, Fort.Abs.Module (fst $1) (snd $1)) }

TupleElemExp :: { (Fort.Abs.BNFC'Position, Fort.Abs.TupleElemExp) }
TupleElemExp
  : Exp { (fst $1, Fort.Abs.TupleElemExp (fst $1) (snd $1)) }

TupleElemPat :: { (Fort.Abs.BNFC'Position, Fort.Abs.TupleElemPat) }
TupleElemPat
  : Pat { (fst $1, Fort.Abs.TupleElemPat (fst $1) (snd $1)) }

TupleElemType :: { (Fort.Abs.BNFC'Position, Fort.Abs.TupleElemType) }
TupleElemType
  : Type { (fst $1, Fort.Abs.TupleElemType (fst $1) (snd $1)) }

LayoutElemTField :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemTField) }
LayoutElemTField
  : TField { (fst $1, Fort.Abs.LayoutElemTField (fst $1) (snd $1)) }

LayoutElemTSum :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemTSum) }
LayoutElemTSum
  : TSum { (fst $1, Fort.Abs.LayoutElemTSum (fst $1) (snd $1)) }

LayoutElemExp :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemExp) }
LayoutElemExp
  : Exp { (fst $1, Fort.Abs.LayoutElemExp (fst $1) (snd $1)) }

LayoutElemStmt :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemStmt) }
LayoutElemStmt
  : Stmt { (fst $1, Fort.Abs.LayoutElemStmt (fst $1) (snd $1)) }

LayoutElemIfBranch :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemIfBranch) }
LayoutElemIfBranch
  : IfBranch { (fst $1, Fort.Abs.LayoutElemIfBranch (fst $1) (snd $1)) }

LayoutElemCaseAlt :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemCaseAlt) }
LayoutElemCaseAlt
  : CaseAlt { (fst $1, Fort.Abs.LayoutElemCaseAlt (fst $1) (snd $1)) }

LayoutElemFieldDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemFieldDecl) }
LayoutElemFieldDecl
  : FieldDecl { (fst $1, Fort.Abs.LayoutElemFieldDecl (fst $1) (snd $1)) }

LayoutElemTailRecDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemTailRecDecl) }
LayoutElemTailRecDecl
  : TailRecDecl { (fst $1, Fort.Abs.LayoutElemTailRecDecl (fst $1) (snd $1)) }

LayoutElemExpDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.LayoutElemExpDecl) }
LayoutElemExpDecl
  : ExpDecl { (fst $1, Fort.Abs.LayoutElemExpDecl (fst $1) (snd $1)) }

ADouble :: { (Fort.Abs.BNFC'Position, Fort.Abs.ADouble) }
ADouble : ADouble0 { (fst $1, (snd $1)) }

ADouble0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.ADouble) }
ADouble0
  : ADoubleTok { (fst $1, Fort.Abs.ADouble (fst $1) (snd $1)) }

AString :: { (Fort.Abs.BNFC'Position, Fort.Abs.AString) }
AString : AString0 { (fst $1, (snd $1)) }

AString0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.AString) }
AString0
  : AStringTok { (fst $1, Fort.Abs.AString (fst $1) (snd $1)) }

AltPat :: { (Fort.Abs.BNFC'Position, Fort.Abs.AltPat) }
AltPat : AltPat0 { (fst $1, (snd $1)) }

AltPat0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.AltPat) }
AltPat0
  : UIdent Pat { (fst $1, Fort.Abs.PCon (fst $1) (snd $1) (snd $2)) }
  | LIdent { (fst $1, Fort.Abs.PDefault (fst $1) (snd $1)) }
  | UIdent { (fst $1, Fort.Abs.PEnum (fst $1) (snd $1)) }
  | Scalar { (fst $1, Fort.Abs.PScalar (fst $1) (snd $1)) }

Binding :: { (Fort.Abs.BNFC'Position, Fort.Abs.Binding) }
Binding : Binding0 { (fst $1, (snd $1)) }

Binding0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Binding) }
Binding0
  : '~' LIdent { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Delayed (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Pat { (fst $1, Fort.Abs.Immediate (fst $1) (snd $1)) }

CaseAlt :: { (Fort.Abs.BNFC'Position, Fort.Abs.CaseAlt) }
CaseAlt : CaseAlt0 { (fst $1, (snd $1)) }

CaseAlt0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.CaseAlt) }
CaseAlt0
  : AltPat '->' Exp { (fst $1, Fort.Abs.CaseAlt (fst $1) (snd $1) (snd $3)) }

Decl :: { (Fort.Abs.BNFC'Position, Fort.Abs.Decl) }
Decl : Decl0 { (fst $1, (snd $1)) }

Decl0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Decl) }
Decl0
  : ExpDecl { (fst $1, Fort.Abs.ExpDecl (fst $1) (snd $1)) }
  | 'export' AString '=' QualLIdent '`' Type '`' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.ExportDecl (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4) (snd $6)) }
  | 'operator' InfixOp '=' InfixInfo { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.InfixDecl (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'operator' PrefixOp '=' QualLIdent { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.PrefixDecl (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'qualifier' UIdent '=' AString { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.QualDecl (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'type' UIdent '=' Type { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TypeDecl (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }

Exp :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp : Exp0 { (fst $1, (snd $1)) }

Exp0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp0
  : '\\' ListBinding '->' Exp { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Lam (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | Exp1 { (fst $1, (snd $1)) }

Exp1 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp1
  : Exp1 'where' '{' ListLayoutElemExpDecl '}' { (fst $1, Fort.Abs.Where (fst $1) (snd $1) (snd $4)) }
  | Exp2 { (fst $1, (snd $1)) }

Exp2 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp2
  : Exp2 ':' '`' Type '`' { (fst $1, Fort.Abs.Typed (fst $1) (snd $1) (snd $4)) }
  | Exp3 { (fst $1, (snd $1)) }

Exp3 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp3
  : Exp3 'with' '{' ListLayoutElemFieldDecl '}' { (fst $1, Fort.Abs.With (fst $1) (snd $1) (snd $4)) }
  | Exp4 { (fst $1, (snd $1)) }

Exp4 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp4
  : Exp4 InfixOp Exp { (fst $1, Fort.Abs.InfixOper (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Exp5 { (fst $1, (snd $1)) }

Exp5 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp5
  : Exp5 Exp6 { (fst $1, Fort.Abs.App (fst $1) (snd $1) (snd $2)) }
  | Exp6 { (fst $1, (snd $1)) }

Exp6 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp6
  : PrefixOp Exp7 { (fst $1, Fort.Abs.PrefixOper (fst $1) (snd $1) (snd $2)) }
  | Exp7 { (fst $1, (snd $1)) }

Exp7 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Exp) }
Exp7
  : '[' ListExp ']' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Array (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'case' Exp 'of' '{' ListLayoutElemCaseAlt '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Case (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $5)) }
  | UIdent { (fst $1, Fort.Abs.Con (fst $1) (snd $1)) }
  | 'do' '{' ListLayoutElemStmt '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Do (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | '`' Type '`' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.EType (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'extern' AString '`' Type '`' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Extern (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'if' '{' ListLayoutElemIfBranch '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.If (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | '(' Exp ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Parens (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '{' ListFieldDecl '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Record (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Scalar { (fst $1, Fort.Abs.Scalar (fst $1) (snd $1)) }
  | '(' TupleElemExp ',' ListTupleElemExp ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Tuple (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | '()' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.Unit (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | LIdent { (fst $1, Fort.Abs.Var (fst $1) (snd $1)) }
  | 'array' '{' ListLayoutElemExp '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.XArray (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | Exp7 '.' LIdent { (fst $1, Fort.Abs.XDot (fst $1) (snd $1) (snd $3)) }
  | 'record' '{' ListLayoutElemFieldDecl '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.XRecord (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }

ExpDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.ExpDecl) }
ExpDecl : ExpDecl0 { (fst $1, (snd $1)) }

ExpDecl0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.ExpDecl) }
ExpDecl0
  : Binding '=' Exp { (fst $1, Fort.Abs.Binding (fst $1) (snd $1) (snd $3)) }
  | TailRecDecls { (fst $1, Fort.Abs.TailRec (fst $1) (snd $1)) }

FieldDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.FieldDecl) }
FieldDecl : FieldDecl0 { (fst $1, (snd $1)) }

FieldDecl0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.FieldDecl) }
FieldDecl0
  : LIdent '=' Exp { (fst $1, Fort.Abs.FieldDecl (fst $1) (snd $1) (snd $3)) }

Fixity :: { (Fort.Abs.BNFC'Position, Fort.Abs.Fixity) }
Fixity : Fixity0 { (fst $1, (snd $1)) }

Fixity0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Fixity) }
Fixity0
  : 'infixl' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.InfixL (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'infix' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.InfixN (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'infixr' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.InfixR (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }

IfBranch :: { (Fort.Abs.BNFC'Position, Fort.Abs.IfBranch) }
IfBranch : IfBranch0 { (fst $1, (snd $1)) }

IfBranch0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.IfBranch) }
IfBranch0
  : Exp4 '->' Exp { (fst $1, Fort.Abs.IfBranch (fst $1) (snd $1) (snd $3)) }

InfixInfo :: { (Fort.Abs.BNFC'Position, Fort.Abs.InfixInfo) }
InfixInfo : InfixInfo0 { (fst $1, (snd $1)) }

InfixInfo0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.InfixInfo) }
InfixInfo0
  : QualLIdent Fixity ADouble { (fst $1, Fort.Abs.InfixInfo (fst $1) (snd $1) (snd $2) (snd $3)) }

InfixOp :: { (Fort.Abs.BNFC'Position, Fort.Abs.InfixOp) }
InfixOp : InfixOp0 { (fst $1, (snd $1)) }

InfixOp0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.InfixOp) }
InfixOp0
  : InfixOpTok { (fst $1, Fort.Abs.InfixOp (fst $1) (snd $1)) }

LIdent :: { (Fort.Abs.BNFC'Position, Fort.Abs.LIdent) }
LIdent : LIdent0 { (fst $1, (snd $1)) }

LIdent0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.LIdent) }
LIdent0 : LIdentTok { (fst $1, Fort.Abs.LIdent (fst $1) (snd $1)) }

Pat :: { (Fort.Abs.BNFC'Position, Fort.Abs.Pat) }
Pat : Pat0 { (fst $1, (snd $1)) }

Pat0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Pat) }
Pat0
  : '(' Pat ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.PParens (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' TupleElemPat ',' ListTupleElemPat ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.PTuple (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | Pat ':' '`' Type '`' { (fst $1, Fort.Abs.PTyped (fst $1) (snd $1) (snd $4)) }
  | '()' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.PUnit (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | LIdent { (fst $1, Fort.Abs.PVar (fst $1) (snd $1)) }

PrefixOp :: { (Fort.Abs.BNFC'Position, Fort.Abs.PrefixOp) }
PrefixOp : PrefixOp0 { (fst $1, (snd $1)) }

PrefixOp0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.PrefixOp) }
PrefixOp0
  : PrefixOpTok { (fst $1, Fort.Abs.PrefixOp (fst $1) (snd $1)) }

QualLIdent :: { (Fort.Abs.BNFC'Position, Fort.Abs.QualLIdent) }
QualLIdent : QualLIdent0 { (fst $1, (snd $1)) }

QualLIdent0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.QualLIdent) }
QualLIdent0
  : UIdent '.' LIdent { (fst $1, Fort.Abs.Qual (fst $1) (snd $1) (snd $3)) }
  | LIdent { (fst $1, Fort.Abs.UnQual (fst $1) (snd $1)) }

Scalar :: { (Fort.Abs.BNFC'Position, Fort.Abs.Scalar) }
Scalar : Scalar0 { (fst $1, (snd $1)) }

Scalar0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Scalar) }
Scalar0
  : 'False' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.AFalse (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'True' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.ATrue (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | CharTok { (fst $1, Fort.Abs.Char (fst $1) (snd $1)) }
  | ADouble { (fst $1, Fort.Abs.Double (fst $1) (snd $1)) }
  | IntTok { (fst $1, Fort.Abs.Int (fst $1) (snd $1)) }
  | AString { (fst $1, Fort.Abs.String (fst $1) (snd $1)) }
  | UInt { (fst $1, Fort.Abs.UInt (fst $1) (snd $1)) }

Size :: { (Fort.Abs.BNFC'Position, Fort.Abs.Size) }
Size : Size0 { (fst $1, (snd $1)) }

Size0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Size) }
Size0
  : UInt { (fst $1, Fort.Abs.SzNat (fst $1) (snd $1)) }
  | LIdent { (fst $1, Fort.Abs.SzVar (fst $1) (snd $1)) }

Stmt :: { (Fort.Abs.BNFC'Position, Fort.Abs.Stmt) }
Stmt : Stmt0 { (fst $1, (snd $1)) }

Stmt0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Stmt) }
Stmt0
  : Exp { (fst $1, Fort.Abs.Stmt (fst $1) (snd $1)) }
  | TailRecDecls { (fst $1, Fort.Abs.TailRecLet (fst $1) (snd $1)) }
  | Exp '=' Exp { (fst $1, Fort.Abs.XLet (fst $1) (snd $1) (snd $3)) }

TField :: { (Fort.Abs.BNFC'Position, Fort.Abs.TField) }
TField : TField0 { (fst $1, (snd $1)) }

TField0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.TField) }
TField0
  : LIdent ':' Type { (fst $1, Fort.Abs.TField (fst $1) (snd $1) (snd $3)) }

TSum :: { (Fort.Abs.BNFC'Position, Fort.Abs.TSum) }
TSum : TSum0 { (fst $1, (snd $1)) }

TSum0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.TSum) }
TSum0
  : UIdent ':' Type { (fst $1, Fort.Abs.TCon (fst $1) (snd $1) (snd $3)) }
  | UIdent { (fst $1, Fort.Abs.TEnum (fst $1) (snd $1)) }

TailRecDecl :: { (Fort.Abs.BNFC'Position, Fort.Abs.TailRecDecl) }
TailRecDecl : TailRecDecl0 { (fst $1, (snd $1)) }

TailRecDecl0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.TailRecDecl) }
TailRecDecl0
  : LIdent '=' '\\' LIdent '->' Exp1 { (fst $1, Fort.Abs.TailRecDecl (fst $1) (snd $1) (snd $4) (snd $6)) }

TailRecDecls :: { (Fort.Abs.BNFC'Position, Fort.Abs.TailRecDecls) }
TailRecDecls : TailRecDecls0 { (fst $1, (snd $1)) }

TailRecDecls0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.TailRecDecls) }
TailRecDecls0
  : 'tailrec' '{' ListLayoutElemTailRecDecl '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TailRecDecls (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }

Type :: { (Fort.Abs.BNFC'Position, Fort.Abs.Type) }
Type : Type0 { (fst $1, (snd $1)) }

Type0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Type) }
Type0
  : '\\' ListLIdent '=>' Type { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TLam (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | Type1 { (fst $1, (snd $1)) }

Type1 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Type) }
Type1
  : Type2 '->' Type1 { (fst $1, Fort.Abs.TFun (fst $1) (snd $1) (snd $3)) }
  | Type2 { (fst $1, (snd $1)) }

Type2 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Type) }
Type2
  : Type2 Type3 { (fst $1, Fort.Abs.TApp (fst $1) (snd $1) (snd $2)) }
  | Type3 { (fst $1, (snd $1)) }

Type3 :: { (Fort.Abs.BNFC'Position, Fort.Abs.Type) }
Type3
  : 'Array' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TArray (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'Bool' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TBool (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'C' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TChar (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'F' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TFloat (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'I' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TInt (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | UIdent { (fst $1, Fort.Abs.TName (fst $1) (snd $1)) }
  | 'Opaque' AString { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TOpaque (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '(' Type ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TParens (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'Pointer' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TPointer (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | UIdent '.' UIdent { (fst $1, Fort.Abs.TQualName (fst $1) (snd $1) (snd $3)) }
  | 'Record' '{' ListLayoutElemTField '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TRecord (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | UInt { (fst $1, Fort.Abs.TSize (fst $1) (snd $1)) }
  | '[' ListSize ']' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TSizes (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | 'String' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TString (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | 'Sum' '{' ListLayoutElemTSum '}' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TSum (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $3)) }
  | '(' TupleElemType ',' ListTupleElemType ')' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TTuple (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $4)) }
  | 'U' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TUInt (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | '()' { (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1), Fort.Abs.TUnit (uncurry Fort.Abs.BNFC'Position (tokenLineCol $1))) }
  | LIdent { (fst $1, Fort.Abs.TVar (fst $1) (snd $1)) }

UIdent :: { (Fort.Abs.BNFC'Position, Fort.Abs.UIdent) }
UIdent : UIdent0 { (fst $1, (snd $1)) }

UIdent0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.UIdent) }
UIdent0 : UIdentTok { (fst $1, Fort.Abs.UIdent (fst $1) (snd $1)) }

UInt :: { (Fort.Abs.BNFC'Position, Fort.Abs.UInt) }
UInt : UInt0 { (fst $1, (snd $1)) }

UInt0 :: { (Fort.Abs.BNFC'Position, Fort.Abs.UInt) }
UInt0
  : BinTok { (fst $1, Fort.Abs.Bin (fst $1) (snd $1)) }
  | DecTok { (fst $1, Fort.Abs.Dec (fst $1) (snd $1)) }
  | HexTok { (fst $1, Fort.Abs.Hex (fst $1) (snd $1)) }
  | OctTok { (fst $1, Fort.Abs.Oct (fst $1) (snd $1)) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: Data.Text.Text -> [Token]
myLexer = tokens

-- Entrypoints

pListBinding :: [Token] -> Err [Fort.Abs.Binding]
pListBinding = fmap snd . pListBinding_internal

pListExp :: [Token] -> Err [Fort.Abs.Exp]
pListExp = fmap snd . pListExp_internal

pListFieldDecl :: [Token] -> Err [Fort.Abs.FieldDecl]
pListFieldDecl = fmap snd . pListFieldDecl_internal

pListLIdent :: [Token] -> Err [Fort.Abs.LIdent]
pListLIdent = fmap snd . pListLIdent_internal

pListLayoutElemCaseAlt :: [Token] -> Err [Fort.Abs.LayoutElemCaseAlt]
pListLayoutElemCaseAlt = fmap snd . pListLayoutElemCaseAlt_internal

pListLayoutElemExp :: [Token] -> Err [Fort.Abs.LayoutElemExp]
pListLayoutElemExp = fmap snd . pListLayoutElemExp_internal

pListLayoutElemExpDecl :: [Token] -> Err [Fort.Abs.LayoutElemExpDecl]
pListLayoutElemExpDecl = fmap snd . pListLayoutElemExpDecl_internal

pListLayoutElemFieldDecl :: [Token] -> Err [Fort.Abs.LayoutElemFieldDecl]
pListLayoutElemFieldDecl = fmap snd . pListLayoutElemFieldDecl_internal

pListLayoutElemIfBranch :: [Token] -> Err [Fort.Abs.LayoutElemIfBranch]
pListLayoutElemIfBranch = fmap snd . pListLayoutElemIfBranch_internal

pListLayoutElemStmt :: [Token] -> Err [Fort.Abs.LayoutElemStmt]
pListLayoutElemStmt = fmap snd . pListLayoutElemStmt_internal

pListLayoutElemTField :: [Token] -> Err [Fort.Abs.LayoutElemTField]
pListLayoutElemTField = fmap snd . pListLayoutElemTField_internal

pListLayoutElemTSum :: [Token] -> Err [Fort.Abs.LayoutElemTSum]
pListLayoutElemTSum = fmap snd . pListLayoutElemTSum_internal

pListLayoutElemTailRecDecl :: [Token] -> Err [Fort.Abs.LayoutElemTailRecDecl]
pListLayoutElemTailRecDecl = fmap snd . pListLayoutElemTailRecDecl_internal

pListSize :: [Token] -> Err [Fort.Abs.Size]
pListSize = fmap snd . pListSize_internal

pListTupleElemExp :: [Token] -> Err [Fort.Abs.TupleElemExp]
pListTupleElemExp = fmap snd . pListTupleElemExp_internal

pListTupleElemPat :: [Token] -> Err [Fort.Abs.TupleElemPat]
pListTupleElemPat = fmap snd . pListTupleElemPat_internal

pListTupleElemType :: [Token] -> Err [Fort.Abs.TupleElemType]
pListTupleElemType = fmap snd . pListTupleElemType_internal

pListDecl :: [Token] -> Err [Fort.Abs.Decl]
pListDecl = fmap snd . pListDecl_internal

pModule :: [Token] -> Err Fort.Abs.Module
pModule = fmap snd . pModule_internal

pTupleElemExp :: [Token] -> Err Fort.Abs.TupleElemExp
pTupleElemExp = fmap snd . pTupleElemExp_internal

pTupleElemPat :: [Token] -> Err Fort.Abs.TupleElemPat
pTupleElemPat = fmap snd . pTupleElemPat_internal

pTupleElemType :: [Token] -> Err Fort.Abs.TupleElemType
pTupleElemType = fmap snd . pTupleElemType_internal

pLayoutElemTField :: [Token] -> Err Fort.Abs.LayoutElemTField
pLayoutElemTField = fmap snd . pLayoutElemTField_internal

pLayoutElemTSum :: [Token] -> Err Fort.Abs.LayoutElemTSum
pLayoutElemTSum = fmap snd . pLayoutElemTSum_internal

pLayoutElemExp :: [Token] -> Err Fort.Abs.LayoutElemExp
pLayoutElemExp = fmap snd . pLayoutElemExp_internal

pLayoutElemStmt :: [Token] -> Err Fort.Abs.LayoutElemStmt
pLayoutElemStmt = fmap snd . pLayoutElemStmt_internal

pLayoutElemIfBranch :: [Token] -> Err Fort.Abs.LayoutElemIfBranch
pLayoutElemIfBranch = fmap snd . pLayoutElemIfBranch_internal

pLayoutElemCaseAlt :: [Token] -> Err Fort.Abs.LayoutElemCaseAlt
pLayoutElemCaseAlt = fmap snd . pLayoutElemCaseAlt_internal

pLayoutElemFieldDecl :: [Token] -> Err Fort.Abs.LayoutElemFieldDecl
pLayoutElemFieldDecl = fmap snd . pLayoutElemFieldDecl_internal

pLayoutElemTailRecDecl :: [Token] -> Err Fort.Abs.LayoutElemTailRecDecl
pLayoutElemTailRecDecl = fmap snd . pLayoutElemTailRecDecl_internal

pLayoutElemExpDecl :: [Token] -> Err Fort.Abs.LayoutElemExpDecl
pLayoutElemExpDecl = fmap snd . pLayoutElemExpDecl_internal

pADouble :: [Token] -> Err Fort.Abs.ADouble
pADouble = fmap snd . pADouble_internal

pADouble0 :: [Token] -> Err Fort.Abs.ADouble
pADouble0 = fmap snd . pADouble0_internal

pAString :: [Token] -> Err Fort.Abs.AString
pAString = fmap snd . pAString_internal

pAString0 :: [Token] -> Err Fort.Abs.AString
pAString0 = fmap snd . pAString0_internal

pAltPat :: [Token] -> Err Fort.Abs.AltPat
pAltPat = fmap snd . pAltPat_internal

pAltPat0 :: [Token] -> Err Fort.Abs.AltPat
pAltPat0 = fmap snd . pAltPat0_internal

pBinding :: [Token] -> Err Fort.Abs.Binding
pBinding = fmap snd . pBinding_internal

pBinding0 :: [Token] -> Err Fort.Abs.Binding
pBinding0 = fmap snd . pBinding0_internal

pCaseAlt :: [Token] -> Err Fort.Abs.CaseAlt
pCaseAlt = fmap snd . pCaseAlt_internal

pCaseAlt0 :: [Token] -> Err Fort.Abs.CaseAlt
pCaseAlt0 = fmap snd . pCaseAlt0_internal

pDecl :: [Token] -> Err Fort.Abs.Decl
pDecl = fmap snd . pDecl_internal

pDecl0 :: [Token] -> Err Fort.Abs.Decl
pDecl0 = fmap snd . pDecl0_internal

pExp :: [Token] -> Err Fort.Abs.Exp
pExp = fmap snd . pExp_internal

pExp0 :: [Token] -> Err Fort.Abs.Exp
pExp0 = fmap snd . pExp0_internal

pExp1 :: [Token] -> Err Fort.Abs.Exp
pExp1 = fmap snd . pExp1_internal

pExp2 :: [Token] -> Err Fort.Abs.Exp
pExp2 = fmap snd . pExp2_internal

pExp3 :: [Token] -> Err Fort.Abs.Exp
pExp3 = fmap snd . pExp3_internal

pExp4 :: [Token] -> Err Fort.Abs.Exp
pExp4 = fmap snd . pExp4_internal

pExp5 :: [Token] -> Err Fort.Abs.Exp
pExp5 = fmap snd . pExp5_internal

pExp6 :: [Token] -> Err Fort.Abs.Exp
pExp6 = fmap snd . pExp6_internal

pExp7 :: [Token] -> Err Fort.Abs.Exp
pExp7 = fmap snd . pExp7_internal

pExpDecl :: [Token] -> Err Fort.Abs.ExpDecl
pExpDecl = fmap snd . pExpDecl_internal

pExpDecl0 :: [Token] -> Err Fort.Abs.ExpDecl
pExpDecl0 = fmap snd . pExpDecl0_internal

pFieldDecl :: [Token] -> Err Fort.Abs.FieldDecl
pFieldDecl = fmap snd . pFieldDecl_internal

pFieldDecl0 :: [Token] -> Err Fort.Abs.FieldDecl
pFieldDecl0 = fmap snd . pFieldDecl0_internal

pFixity :: [Token] -> Err Fort.Abs.Fixity
pFixity = fmap snd . pFixity_internal

pFixity0 :: [Token] -> Err Fort.Abs.Fixity
pFixity0 = fmap snd . pFixity0_internal

pIfBranch :: [Token] -> Err Fort.Abs.IfBranch
pIfBranch = fmap snd . pIfBranch_internal

pIfBranch0 :: [Token] -> Err Fort.Abs.IfBranch
pIfBranch0 = fmap snd . pIfBranch0_internal

pInfixInfo :: [Token] -> Err Fort.Abs.InfixInfo
pInfixInfo = fmap snd . pInfixInfo_internal

pInfixInfo0 :: [Token] -> Err Fort.Abs.InfixInfo
pInfixInfo0 = fmap snd . pInfixInfo0_internal

pInfixOp :: [Token] -> Err Fort.Abs.InfixOp
pInfixOp = fmap snd . pInfixOp_internal

pInfixOp0 :: [Token] -> Err Fort.Abs.InfixOp
pInfixOp0 = fmap snd . pInfixOp0_internal

pLIdent :: [Token] -> Err Fort.Abs.LIdent
pLIdent = fmap snd . pLIdent_internal

pLIdent0 :: [Token] -> Err Fort.Abs.LIdent
pLIdent0 = fmap snd . pLIdent0_internal

pPat :: [Token] -> Err Fort.Abs.Pat
pPat = fmap snd . pPat_internal

pPat0 :: [Token] -> Err Fort.Abs.Pat
pPat0 = fmap snd . pPat0_internal

pPrefixOp :: [Token] -> Err Fort.Abs.PrefixOp
pPrefixOp = fmap snd . pPrefixOp_internal

pPrefixOp0 :: [Token] -> Err Fort.Abs.PrefixOp
pPrefixOp0 = fmap snd . pPrefixOp0_internal

pQualLIdent :: [Token] -> Err Fort.Abs.QualLIdent
pQualLIdent = fmap snd . pQualLIdent_internal

pQualLIdent0 :: [Token] -> Err Fort.Abs.QualLIdent
pQualLIdent0 = fmap snd . pQualLIdent0_internal

pScalar :: [Token] -> Err Fort.Abs.Scalar
pScalar = fmap snd . pScalar_internal

pScalar0 :: [Token] -> Err Fort.Abs.Scalar
pScalar0 = fmap snd . pScalar0_internal

pSize :: [Token] -> Err Fort.Abs.Size
pSize = fmap snd . pSize_internal

pSize0 :: [Token] -> Err Fort.Abs.Size
pSize0 = fmap snd . pSize0_internal

pStmt :: [Token] -> Err Fort.Abs.Stmt
pStmt = fmap snd . pStmt_internal

pStmt0 :: [Token] -> Err Fort.Abs.Stmt
pStmt0 = fmap snd . pStmt0_internal

pTField :: [Token] -> Err Fort.Abs.TField
pTField = fmap snd . pTField_internal

pTField0 :: [Token] -> Err Fort.Abs.TField
pTField0 = fmap snd . pTField0_internal

pTSum :: [Token] -> Err Fort.Abs.TSum
pTSum = fmap snd . pTSum_internal

pTSum0 :: [Token] -> Err Fort.Abs.TSum
pTSum0 = fmap snd . pTSum0_internal

pTailRecDecl :: [Token] -> Err Fort.Abs.TailRecDecl
pTailRecDecl = fmap snd . pTailRecDecl_internal

pTailRecDecl0 :: [Token] -> Err Fort.Abs.TailRecDecl
pTailRecDecl0 = fmap snd . pTailRecDecl0_internal

pTailRecDecls :: [Token] -> Err Fort.Abs.TailRecDecls
pTailRecDecls = fmap snd . pTailRecDecls_internal

pTailRecDecls0 :: [Token] -> Err Fort.Abs.TailRecDecls
pTailRecDecls0 = fmap snd . pTailRecDecls0_internal

pType :: [Token] -> Err Fort.Abs.Type
pType = fmap snd . pType_internal

pType0 :: [Token] -> Err Fort.Abs.Type
pType0 = fmap snd . pType0_internal

pType1 :: [Token] -> Err Fort.Abs.Type
pType1 = fmap snd . pType1_internal

pType2 :: [Token] -> Err Fort.Abs.Type
pType2 = fmap snd . pType2_internal

pType3 :: [Token] -> Err Fort.Abs.Type
pType3 = fmap snd . pType3_internal

pUIdent :: [Token] -> Err Fort.Abs.UIdent
pUIdent = fmap snd . pUIdent_internal

pUIdent0 :: [Token] -> Err Fort.Abs.UIdent
pUIdent0 = fmap snd . pUIdent0_internal

pUInt :: [Token] -> Err Fort.Abs.UInt
pUInt = fmap snd . pUInt_internal

pUInt0 :: [Token] -> Err Fort.Abs.UInt
pUInt0 = fmap snd . pUInt0_internal
}

