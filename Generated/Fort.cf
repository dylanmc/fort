comment ";;";
token ADoubleTok (('-') ?) (((digit +) ('.') digit + (('e') '-' ? digit +) ?));
token AStringTok ('"') (((char) - ('"') - ('\\')) | ((('\\') ('"'))) | ((('\\') ('\\'))) | ((('\\') ('n'))) | ((('\\') digit +)) | ((('\\') ('x') (digit | (('a' | ('b') | ('c') | ('d') | ('e') | ('f')))) +))) * ('"');
token BinTok ((('0') ('b'))) ('0' | ('1')) +;
token CharTok ('\'') ((((char) - ('\'') - ('\\')) | ((('\\') ('\''))) | ((('\\') ('\\'))) | ((('\\') ('n'))) | ((('\\') digit +)))) ('\'');
token DecTok digit +;
token HexTok ((('0') ('x'))) (digit | (('a' | ('b') | ('c') | ('d') | ('e') | ('f')))) +;
token InfixOpTok ('+' | ('-') | ('=') | ('!') | ('#') | ('$') | ('%') | ('^') | ('&') | ('*') | ('|') | ('/') | ('<') | ('>') | ('.') | ('?') | ('~') | (':')) +;
token IntTok (('-')) digit +;
token LIdentTok ((lower | ('_'))) (letter | (digit) | ('_') | ('-') | ('\'')) *;
token OctTok ((('0') ('o'))) ('0' | ('1') | ('2') | ('3') | ('4') | ('5') | ('6') | ('7')) +;
token PrefixOpTok ('@') ('@' | ('+') | ('-') | ('=') | ('!') | ('#') | ('$') | ('%') | ('^') | ('&') | ('*') | ('|') | ('/') | ('<') | ('>') | ('.') | ('?') | ('~') | (':')) *;
token UIdentTok (upper) (letter | (digit) | ('_') | ('-') | ('\'')) *;
layout "Record";
layout "Sum";
layout "array";
layout "do";
layout "if";
layout "of";
layout "record";
layout "tailrec";
layout "where";
layout "with";
separator nonempty Binding "";
separator nonempty Exp ",";
separator nonempty FieldDecl ",";
separator nonempty LIdent "";
separator nonempty LayoutElemCaseAlt ";";
separator nonempty LayoutElemExp ";";
separator nonempty LayoutElemExpDecl ";";
separator nonempty LayoutElemFieldDecl ";";
separator nonempty LayoutElemIfBranch ";";
separator nonempty LayoutElemStmt ";";
separator nonempty LayoutElemTField ";";
separator nonempty LayoutElemTSum ";";
separator nonempty LayoutElemTailRecDecl ";";
separator nonempty Size ",";
separator nonempty TupleElemExp ",";
separator nonempty TupleElemPat ",";
separator nonempty TupleElemType ",";
layout toplevel;
separator Decl ";";
Module.Module ::= [ Decl ];
TupleElemExp.TupleElemExp ::= Exp;
TupleElemPat.TupleElemPat ::= Pat;
TupleElemType.TupleElemType ::= Type;
LayoutElemTField.LayoutElemTField ::= TField;
LayoutElemTSum.LayoutElemTSum ::= TSum;
LayoutElemExp.LayoutElemExp ::= Exp;
LayoutElemStmt.LayoutElemStmt ::= Stmt;
LayoutElemIfBranch.LayoutElemIfBranch ::= IfBranch;
LayoutElemCaseAlt.LayoutElemCaseAlt ::= CaseAlt;
LayoutElemFieldDecl.LayoutElemFieldDecl ::= FieldDecl;
LayoutElemTailRecDecl.LayoutElemTailRecDecl ::= TailRecDecl;
LayoutElemExpDecl.LayoutElemExpDecl ::= ExpDecl;
_.ADouble ::= ADouble0;
ADouble.ADouble0 ::= ADoubleTok;
_.AString ::= AString0;
AString.AString0 ::= AStringTok;
_.AltPat ::= AltPat0;
PCon.AltPat0 ::= UIdent Pat;
PDefault.AltPat0 ::= LIdent;
PEnum.AltPat0 ::= UIdent;
PScalar.AltPat0 ::= Scalar;
_.Binding ::= Binding0;
Delayed.Binding0 ::= "~" LIdent;
Immediate.Binding0 ::= Pat;
_.CaseAlt ::= CaseAlt0;
CaseAlt.CaseAlt0 ::= AltPat "->" Exp;
_.Decl ::= Decl0;
ExpDecl.Decl0 ::= ExpDecl;
ExportDecl.Decl0 ::= "export" AString "=" QualLIdent "`" Type "`";
InfixDecl.Decl0 ::= "operator" InfixOp "=" InfixInfo;
PrefixDecl.Decl0 ::= "operator" PrefixOp "=" QualLIdent;
QualDecl.Decl0 ::= "qualifier" UIdent "=" AString;
TypeDecl.Decl0 ::= "type" UIdent "=" Type;
_.Exp ::= Exp0;
Lam.Exp0 ::= "\\" [ Binding ] "->" Exp;
_.Exp0 ::= Exp1;
Where.Exp1 ::= Exp1 "where" "{" [ LayoutElemExpDecl ] "}";
_.Exp1 ::= Exp2;
Typed.Exp2 ::= Exp2 ":" "`" Type "`";
_.Exp2 ::= Exp3;
With.Exp3 ::= Exp3 "with" "{" [ LayoutElemFieldDecl ] "}";
_.Exp3 ::= Exp4;
InfixOper.Exp4 ::= Exp4 InfixOp Exp;
_.Exp4 ::= Exp5;
App.Exp5 ::= Exp5 Exp6;
_.Exp5 ::= Exp6;
PrefixOper.Exp6 ::= PrefixOp Exp7;
_.Exp6 ::= Exp7;
Array.Exp7 ::= "[" [ Exp ] "]";
Case.Exp7 ::= "case" Exp "of" "{" [ LayoutElemCaseAlt ] "}";
Con.Exp7 ::= UIdent;
Do.Exp7 ::= "do" "{" [ LayoutElemStmt ] "}";
EType.Exp7 ::= "`" Type "`";
Extern.Exp7 ::= "extern" AString "`" Type "`";
If.Exp7 ::= "if" "{" [ LayoutElemIfBranch ] "}";
Parens.Exp7 ::= "(" Exp ")";
internal Qualified.Exp7 ::= UIdent "." LIdent;
Record.Exp7 ::= "{" [ FieldDecl ] "}";
Scalar.Exp7 ::= Scalar;
internal Select.Exp7 ::= Exp "." LIdent;
Tuple.Exp7 ::= "(" TupleElemExp "," [ TupleElemExp ] ")";
Unit.Exp7 ::= "()";
Var.Exp7 ::= LIdent;
XArray.Exp7 ::= "array" "{" [ LayoutElemExp ] "}";
XDot.Exp7 ::= Exp7 "." LIdent;
XRecord.Exp7 ::= "record" "{" [ LayoutElemFieldDecl ] "}";
_.ExpDecl ::= ExpDecl0;
Binding.ExpDecl0 ::= Binding "=" Exp;
TailRec.ExpDecl0 ::= TailRecDecls;
_.FieldDecl ::= FieldDecl0;
FieldDecl.FieldDecl0 ::= LIdent "=" Exp;
_.Fixity ::= Fixity0;
InfixL.Fixity0 ::= "infixl";
InfixN.Fixity0 ::= "infix";
InfixR.Fixity0 ::= "infixr";
_.IfBranch ::= IfBranch0;
IfBranch.IfBranch0 ::= Exp4 "->" Exp;
_.InfixInfo ::= InfixInfo0;
InfixInfo.InfixInfo0 ::= QualLIdent Fixity ADouble;
_.InfixOp ::= InfixOp0;
InfixOp.InfixOp0 ::= InfixOpTok;
_.LIdent ::= LIdent0;
LIdent.LIdent0 ::= LIdentTok;
_.Pat ::= Pat0;
PParens.Pat0 ::= "(" Pat ")";
PTuple.Pat0 ::= "(" TupleElemPat "," [ TupleElemPat ] ")";
PTyped.Pat0 ::= Pat ":" "`" Type "`";
PUnit.Pat0 ::= "()";
PVar.Pat0 ::= LIdent;
_.PrefixOp ::= PrefixOp0;
PrefixOp.PrefixOp0 ::= PrefixOpTok;
_.QualLIdent ::= QualLIdent0;
Qual.QualLIdent0 ::= UIdent "." LIdent;
UnQual.QualLIdent0 ::= LIdent;
_.Scalar ::= Scalar0;
AFalse.Scalar0 ::= "False";
ATrue.Scalar0 ::= "True";
Char.Scalar0 ::= CharTok;
Double.Scalar0 ::= ADouble;
Int.Scalar0 ::= IntTok;
String.Scalar0 ::= AString;
UInt.Scalar0 ::= UInt;
_.Size ::= Size0;
SzNat.Size0 ::= UInt;
SzVar.Size0 ::= LIdent;
_.Stmt ::= Stmt0;
internal Let.Stmt0 ::= Pat "=" Exp;
Stmt.Stmt0 ::= Exp;
TailRecLet.Stmt0 ::= TailRecDecls;
XLet.Stmt0 ::= Exp "=" Exp;
_.TField ::= TField0;
TField.TField0 ::= LIdent ":" Type;
_.TSum ::= TSum0;
TCon.TSum0 ::= UIdent ":" Type;
TEnum.TSum0 ::= UIdent;
_.TailRecDecl ::= TailRecDecl0;
TailRecDecl.TailRecDecl0 ::= LIdent "=" "\\" LIdent "->" Exp1;
_.TailRecDecls ::= TailRecDecls0;
TailRecDecls.TailRecDecls0 ::= "tailrec" "{" [ LayoutElemTailRecDecl ] "}";
_.Type ::= Type0;
TLam.Type0 ::= "\\" [ LIdent ] "=>" Type;
_.Type0 ::= Type1;
TFun.Type1 ::= Type2 "->" Type1;
_.Type1 ::= Type2;
TApp.Type2 ::= Type2 Type3;
_.Type2 ::= Type3;
TArray.Type3 ::= "Array";
TBool.Type3 ::= "Bool";
TChar.Type3 ::= "C";
TFloat.Type3 ::= "F";
TInt.Type3 ::= "I";
TName.Type3 ::= UIdent;
TOpaque.Type3 ::= "Opaque" AString;
TParens.Type3 ::= "(" Type ")";
TPointer.Type3 ::= "Pointer";
TQualName.Type3 ::= UIdent "." UIdent;
TRecord.Type3 ::= "Record" "{" [ LayoutElemTField ] "}";
TSize.Type3 ::= UInt;
TSizes.Type3 ::= "[" [ Size ] "]";
TString.Type3 ::= "String";
TSum.Type3 ::= "Sum" "{" [ LayoutElemTSum ] "}";
TTuple.Type3 ::= "(" TupleElemType "," [ TupleElemType ] ")";
TUInt.Type3 ::= "U";
TUnit.Type3 ::= "()";
TVar.Type3 ::= LIdent;
_.UIdent ::= UIdent0;
UIdent.UIdent0 ::= UIdentTok;
_.UInt ::= UInt0;
Bin.UInt0 ::= BinTok;
Dec.UInt0 ::= DecTok;
Hex.UInt0 ::= HexTok;
Oct.UInt0 ::= OctTok;